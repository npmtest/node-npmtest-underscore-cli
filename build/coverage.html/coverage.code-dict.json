{"/home/travis/build/npmtest/node-npmtest-underscore-cli/test.js":"/* istanbul instrument in package npmtest_underscore_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/lib.npmtest_underscore_cli.js":"/* istanbul instrument in package npmtest_underscore_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_underscore_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_underscore_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-underscore-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_underscore_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_underscore_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_underscore_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_underscore_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_underscore_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_underscore_cli.__dirname + '/lib.npmtest_underscore_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/index.js":"","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/formatter.js":"var _ = require('./underscore');\nvar isArray = _.isArray;\nvar isDate = _.isDate;\nvar isRegExp = _.isRegExp;\nvar isString = _.isString;\nvar isNumber = _.isNumber;\nvar isBoolean = _.isBoolean;\nvar toString = Object.prototype.toString;\n\nfunction isError(e) {\n  return typeof e === 'object' && Object.prototype.toString.call(e) === '[object Error]';\n}\n\nfunction singleQuoteString (str) {\n  str = JSON.stringify(str);\n  str = str.substr(1, str.length - 2) // strip outter double quotes\n    .replace(/'/g, \"\\\\'\")       // escape single quotes\n    .replace(/\\\\\"/g, '\"');      // unescape double quotes\n  return \"'\" + str + \"'\";\n}\n\nfunction doubleQuoteString (str) {\n  return JSON.stringify(str);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\nvar colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39],\n  'orange' : ['1;31', '39;22']\n};\n\n// Don't use 'blue' not visible on cmd.exe\nvar styles = {\n  'special': 'cyan',\n  'function': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  'name': undefined, // intentionally not styling\n  'private': 'grey',\n  'regexp': 'red',\n  'error': 'orange'\n};\n\nfunction uncolor(str) {\n  return str.replace(/\\x1B\\[[^m]+m/g, '');\n}\n\nfunction stylizeWithColor(str, styleType) {\n  if (str === null) {\n    return null;\n  }\n  var style = styles[styleType];\n\n  if (style) {\n    str = uncolor(str);\n    var real_length = str.length;\n    var ret = '\\x1B[' + colors[style][0] + 'm' + str + '\\x1B[' + colors[style][1] + 'm';\n    ret = new String(ret);\n    ret.real_length = real_length;\n    return ret;\n  } else {\n    return str;\n  }\n}\n\nfunction stylizeWithHtml(str, styleType) {\n  if (str === null) {\n    return null;\n  }\n  var style = styles[styleType];\n\n  str = str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  if (style) {\n    str = uncolor(str);\n    var real_length = str.length;\n    var ret = '<span style=\"color:' + style + '\">' + str + '</span>';\n    ret = new String(ret);\n    ret.real_length = real_length;\n    return ret;\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction getTypeOf(value) {\n  // For some reason typeof null is \"object\", so special case here.\n  var typeof_value = typeof value;\n\n  if (typeof_value === 'object') {\n    if (value === null) {\n      return 'null';\n    }\n\n    switch(toString.call(value)) {\n      case '[object Array]':\n        return 'array';\n      case '[object Date]':\n        return 'date';\n      case '[object Error]':\n        return 'error';\n      case '[object RegExp]':\n        return 'regexp';\n      case '[object String]':\n        return 'string'; // new String(\"foo\")) has type 'object'\n      case '[object Boolean]':\n        return 'boolean'; // new Boolean(true) has type 'object'\n      case '[object Number]':\n        return 'number'; // new Number(9) has type 'object'\n      default:\n        return 'object';\n    }\n  }\n\n  return typeof_value;\n}\n\nfunction formatValue(ctx, value) {\n  var typeof_value = getTypeOf(value);\n  var atMaxDepth = (ctx.maxDepth !== null && ctx.seen.length >= ctx.maxDepth);\n\n  var formatted = '';\n  switch (typeof_value) {\n    // Handle primitive types\n    case 'null':      formatted = 'null'; break;\n    case 'undefined': formatted = 'undefined'; break;\n    case 'string':    formatted = ctx.quoteString(value); break;\n    case 'number':    formatted = '' + value; break;\n    case 'boolean':   formatted = '' + value; break;\n\n  }\n\n  // Special Objects\n  if (ctx.jsonParity) {\n    switch(typeof_value) {\n      case 'date':      formatted = JSON.stringify(value); break;\n      case 'error':     typeof_value = 'object'; break;\n      case 'regexp':    typeof_value = 'object'; break;\n      case 'function':  formatted = null; break;// don't print\n    }\n  } else {\n    switch(typeof_value) {\n      case 'date':      formatted = ISO8601(value); break;\n      case 'error':     formatted = '[' + Error.prototype.toString.call(value) + ']'; break;\n      case 'regexp':    formatted = RegExp.prototype.toString.call(value); break;\n      case 'function':  formatted = '[Function' + (value.name ? ': ' + value.name : '') + ']'; break;\n    }\n  }\n  if (formatted !== '') {\n    formatted = ctx.stylize(formatted, typeof_value);\n  }\n\n  // Array\n  if (typeof_value === 'array') {\n    if (atMaxDepth) {\n      return ctx.stylize('[...]', 'special');\n    } else {\n      formatted = formatArray(ctx, value);\n    }\n  }\n\n  // Object and \"objects\" that have properties\n  if (typeof_value === 'object' || (ctx.complexObjects && typeof value === 'object' && value !== null)) {\n    if (atMaxDepth) {\n      if (formatObject(ctx, value, typeof_value) !== '') {\n        formatted += ctx.stylize('{...}', 'special');\n      }\n    } else {\n      formatted += formatObject(ctx, value, typeof_value);\n    }\n  }\n\n  return formatted;\n}\n\nfunction ISO8601(d) {\n  function f2(n) {\n    // Format integers to have at least two digits.\n    return (n < 10) ? ('0' + n) : n;\n  }\n  function f3(n) {\n    // Format integers to have at least three digits.\n    return (n < 10) ? ('00' + n) : (n < 100) ? ('0' + n) : n;\n  }\n\n  return d.getUTCFullYear()   + '-' +\n    f2(d.getUTCMonth() + 1)   + '-' +\n    f2(d.getUTCDate())        + 'T' +\n    f2(d.getUTCHours())       + ':' +\n    f2(d.getUTCMinutes())     + ':' +\n    f2(d.getUTCSeconds())     + '.' +\n    f3(d.getMilliseconds())   + 'Z';\n}\n\n\nfunction joinCollection(ctx, entries, b1, b2, insideObject) {\n  if (entries.length === 0) {\n    return b1 + ctx.space + b2;\n  }\n  var shouldWrap = false;\n  var length = b1.length + b2.length;\n  if (ctx.wrapWidth >= 0) {\n    length += (entries.length - 1) * (1 + ctx.space.length); // separators\n    for(var i = 0, l = entries.length; i < l; i++) {\n      length += (entries[i].real_length || entries[i].length);\n      if (length > ctx.wrapWidth) {\n        shouldWrap = true;\n        break;\n      }\n    }\n  }\n\n  var ret;\n  if (shouldWrap) {\n    ret = b1 + ctx.cr + ctx.indent + entries.join(',' + ctx.cr + ctx.indent) + ctx.cr + b2;\n  } else {\n    var sp = insideObject ? ctx.space : '';\n    ret = b1 + sp + entries.join(',' + ctx.space) + sp + b2;\n    ret = new String(ret);\n    ret.real_length = length; // needed for correct line wrapping in the presence of ANSI color escapes\n  }\n  return ret;\n}\n\nfunction formatArray(ctx, value) {\n  ctx.seen.push(value);\n\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      if (ctx.jsonParity && value[i] === undefined) {\n        // jsonParity: when array entries are equal to 'undefined', JSON.stringify prints 'null'\n        output.push(ctx.stylize('null', 'null'));\n      } else {\n        output.push(formatProperty(ctx, value, String(i), false, true));\n      }\n    } else {\n      // jsonParity: when value entries are unset, JSON.stringify prints 'null'\n      output.push(ctx.jsonParity ? ctx.stylize('null', 'null') : '');\n    }\n  }\n\n\n  ctx.seen.pop();\n\n  return joinCollection(ctx, output, '[', ']');\n}\n\nfunction formatObject(ctx, value, type) {\n  ctx.seen.push(value);\n\n  var visibleKeys = Object.keys(value);\n  var output = visibleKeys.map(function(key) {\n    if (type === 'array' && key.match(/^\\d+$/)) {\n      return null;\n    }\n    return formatProperty(ctx, value, key, false, false);\n  });\n\n  if (ctx.showHidden) {\n    var touched = {};\n    visibleKeys.map(function(key) {\n      touched[key] = true;\n    });\n    var allKeys = Object.getOwnPropertyNames(value);\n    allKeys.map(function (key) {\n      if (! touched[key]) {\n        output.push(formatProperty(ctx, value, key, true, false));\n      }\n    });\n  }\n\n  // skip nulls (keys which are being ignored by current config)\n  output = _.filter(output, function (v) { return v !== null; });\n\n  ctx.seen.pop();\n\n  if (type !== 'object' && output.length === 0) {\n    return '';\n  } else {\n    return joinCollection(ctx, output, '{', '}', true);\n  }\n}\n\nfunction formatProperty(ctx, obj, key, isPrivate, inside_array) {\n  if (ctx.jsonParity && obj[key] === undefined) {\n    return null; // jsonParity: properties that are equal to 'undefined' are not printed\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(obj, key) || { value: obj[key] };\n  var str;\n  if (desc.get || desc.set) {\n    if (! ctx.showAccessors) {\n      return null;\n    }\n    if (desc.get) {\n      if (desc.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  } else if (ctx.seen.indexOf(desc.value) > -1) {\n    str = ctx.stylize('[Circular]', 'special');\n  } else {\n    str = formatValue(ctx, desc.value);\n    if (str === null) {\n      return null; // skip key (e.g. functions in JSON mode)\n    }\n    if (str.indexOf('\\n') > -1) {\n      str = str.split('\\n').join('\\n' + ctx.indent);\n      if (ctx.openBraceOnNewline) {\n        str = '\\n' + ctx.indent + str;\n      }\n    }\n  }\n\n  if (inside_array && key.match(/^\\d+$/)) {\n    return str;\n  } else {\n    return formatKey(ctx, key, isPrivate) + ':' + ctx.space + str;\n  }\n}\n\nfunction formatKey(ctx, key, isPrivate) {\n  var name = '' + key;\n  if (isPrivate) {\n    return ctx.stylize('[' + name + ']', 'private');\n  } else if (! ctx.quoteKeys && name.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n    return ctx.stylize(name, 'name');\n  } else {\n    name = ctx.quoteString(name);\n    return ctx.stylize(name, 'name');\n  }\n}\n\nfunction Formatter (config) {\n  var ctx = {};\n\n  // Booleans\n  ctx.showHidden           = config.showHidden;\n  ctx.showAccessors        = config.showAccessors;\n  ctx.quoteKeys            = config.quoteKeys;\n  ctx.modelUndefinedAsNull = config.modelUndefinedAsNull;\n  ctx.openBraceOnNewline   = config.openBraceOnNewline;\n  ctx.jsonParity           = config.jsonParity;\n  ctx.complexObjects       = config.complexObjects;\n\n  // Method Selection\n  ctx.stylize         = (config.color) ? (config.color === 'html' ? stylizeWithHtml : stylizeWithColor) : stylizeNoColor;\n  ctx.quoteString     = (config.quotes === \"'\") ? singleQuoteString : doubleQuoteString;\n\n  // Other\n  ctx.wrapWidth = config.wrapWidth;\n  ctx.maxDepth  = config.maxDepth;\n  ctx.space     = config.space;\n  ctx.indent    = config.indent;\n  ctx.cr        = config.cr;\n\n  var formatter = function (value) {\n    ctx.seen = [];\n    return \"\"+formatValue(ctx, value, ctx.maxDepth);\n  };\n  formatter.withConfig = withConfig;\n  formatter.ctx = ctx;\n  formatter.config = config;\n  return formatter;\n}\n\nmodule.exports = new Formatter({\n  showHidden: false,\n  color: false,\n  quotes: '\"',\n  space: ' ',\n  indent: '  ',\n  cr: '\\n',\n  quoteKeys: true,\n  showAccessors: false,\n  jsonParity: true,\n  // jsonParity: 1) add 'null' to array when elements are unset or equal to 'undefined' (distinct cases); skip object properties that map to 'undefined'\n  wrapWidth: 100,\n  maxDepth: null,\n  complexObjects: false\n});\n\nfunction withConfig(config) {\n  if (typeof config !== 'object') {\n    throw new Error('expected object');\n  }\n  return new Formatter(_.extend({}, this.config, config));\n}\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/underscore.js":"var _ = require('underscore');\n_.mixin(require('underscore.string').exports());\n_.indent = function (str, spaces) {\n  // DDOPSON-2012-04-13 - There is a bug in V8 matching /^/gm to indent multi-line text.\n  // The original code in commander.js used \"str.replace(/^/, spaces);\"\n  // On versions of V8 with the bug, this caused spaces to be inserted into the middle of the usage text, totally borking the alignment\n  // The code below is a workaround that fixes the issue on all versions.\n  // See http://stackoverflow.com/questions/10150139/bug-in-javascript-regexp-parser-when-matching-beginning-of-line\n  // See http://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/regress/regress-1748.js?spec=svn9504&r=9504\n\n  var indent;\n  if (_.isString(spaces)) {\n    indent = spaces;\n  } else if (_.isNumber(spaces)) {\n    indent = '';\n    for(var i = 0; i < spaces; i++) {\n      indent += ' ';\n    }\n  } else {\n    indent = '    ';\n  }\n\n  return str.replace(/(^|\\n)/g, '$1' + indent);\n};\n\nmodule.exports = _;\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/functions.js":"var _ = require('./underscore');\nvar fs = require('fs');\n\nvar functions = _.extend({}, _);\nmodule.exports = functions;\n\nfunctions['_'] = _;\n\nfunctions['console'] = console;\n\n// DDOPSON-2012-11-05 - setTimeout, clearTimeout, setInterval, clearInterval would need to be wrapped so that we know not to terminate the program and spew output.\n// Unclear if they even make sense to expose to a user expression\n\nfunctions['print'] = _.bind(console.log, console);\n\nfunctions['read'] = function (filename) {\n  try {\n    return fs.readFileSync(filename, 'utf8');\n  } catch (e) {\n    console.error(\"Error reading '%s': %s\", filename, e.message);\n    process.exit(-1);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/input-formats.js":" \nvar util = require('util');\nvar MessagePack = null; // lazy load of require('msgpack')\nvar _ = require('./underscore');\n\nexports['string'] = {\n  description: \"Treat the entire input as a single string\",\n  parse: function (buff) {\n    return buff.toString('utf8');\n  }\n};\n\nexports['text'] = {\n  description: \"Treat the input as a newline delimited list of strings\",\n  parse: function (buff) {\n    return buff.toString('utf8').split(/\\r?\\n/);\n  }\n};\n\nexports['lax'] = {\n  description: \"Lax JSON parsing using 'eval'\",\n  parse: function (buff) {\n    return eval(\"ret=\" + buff.toString('utf8')); // somehow, adding \"ret=\" makes this work.  else objects don't parse correctly.  It seems to not cause any issues.\n  }\n};\n\nexports['strict'] = {\n  description: \"Strict JSON parsing\",\n  parse: function (buff) {\n    return JSON.parse(buff);\n  }\n};\n\nexports['msgpack'] = {\n  description: 'MessagePack binary JSON format',\n  parse: function (buff) {\n    if (! MessagePack) {\n      MessagePack = require('msgpack');\n    }\n    return MessagePack.unpack(buff);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/output-formats.js":"var util = require('util');\nvar _ = require('./underscore');\nvar Formatter = require('./formatter');\nvar MessagePack = null; // lazy load of require('msgpack')\n\nexports['json'] = {\n  description: \"The default format.  Outputs strictly correct, human-readible JSON w/ smart whitespace. This format has received a lot of love.  Try the '--color' flag.\",\n  stringify: Formatter.withConfig({\n    color: false,\n    jsonNullBehavior: true, // add 'null' to array when elements are unset or equal to 'undefined' (distinct cases); skip object properties that map to 'undefined'\n    jsonIgnoreArrayProps: true, // In JS, it's possible to set properties on an Array object.  E.g., (v=[1, 2, 3, 4],v.prop1=true,v).  JSON.stringify ignores these.  When this behavior is 'true', so do we\n    quoteKeys: true,\n    quotes: '\"',\n    wrapWidth: 100,\n    openBraceOnNewline: false\n  })\n};\n\nexports['dense'] = {\n  description: \"Output dense JSON using JSON.stringify.  Efficient, but hard to read.\",\n  stringify: function (data) {\n    return JSON.stringify(data);\n  }\n};\n\nexports['stringify'] = {\n  description: \"Output formatted JSON using JSON.stringify.  A bit too verbose.\",\n  stringify: function (data) {\n    return JSON.stringify(data, null, '  ');\n  }\n};\n\nexports['pretty'] = {\n  description: \"Output a richer 'inspection' syntax.  When printing array-and-object graphs that can be generated by JSON.parse, the output is valid JavaScript syntax (but not strict JSON).  When handling complex objects not expressable in declarative JavaScript (eg arrays that also have object properties), the output is informative, but not parseable as JavaScript.\",\n  stringify: Formatter.withConfig({\n    color: true,\n    jsonParity: false,\n    quoteKeys: false,\n    quotes: '\"',\n    wrapWidth: 100,\n    openBraceOnNewline: false,\n    complexObjects: true\n  })\n};\n\nexports['inspect'] = {\n  description: \"Uses Node's 'util.inspect' to print the output\",\n  stringify: function (data) {\n    return util.inspect(data, false, 9999);\n  }\n};\n\nexports['text'] = {\n  description: \"If data is a string, it is printed directly without quotes.  If data is an array, elements are separated by newlines.  Objects and arrays-within-arrays are JSON formated into a single line.  The stock example does not convey the intent of this format, which is designed to enable traditional text processing via JavaScript and to facilitate flattening of JSON lists into line-delimited lists.\",\n  stringify: function (data) {\n    if (! _.isArray(data)) {\n      data = [data];\n    }\n    return _.map(data, function (entry) {\n      if (_.isString(entry)) {\n        return entry;\n      } else {\n        return JSON.stringify(entry);\n      }\n    }).join('\\n');\n  }\n};\n\nexports['msgpack'] = {\n  description: 'MessagePack binary JSON format',\n  stringify: function (text) {\n    if (! MessagePack) {\n      MessagePack = require('msgpack');\n    }\n    return MessagePack.pack(text);\n  }\n};\n\n\nfunction bold (string) {\n  // bold white.  see https://github.com/gf3/coloured/blob/master/lib/coloured.js\n  return \"\\033[1;37m\" + string + \"\\033[0m\";\n}\n\n\nexports['msgpack.print'] = {\n  description: 'Textual representation of MessagePack',\n  stringify: function (text) {\n    if (! MessagePack) {\n      MessagePack = require('msgpack');\n    }\n    return MessagePack.pack(text)\n      .toString('binary')\n      .replace(/./g, function (x) {\n        var cc = x.charCodeAt(0);\n        if (cc > 31 && cc < 127) {\n          return x;\n        } else {\n          if (cc < 16) {\n            return bold(\"<0\" + cc.toString(16) + \">\");\n          } else {\n            return bold(\"<\" + cc.toString(16) + \">\");\n          }\n        }\n      });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-underscore-cli/node_modules/underscore-cli/lib/template.js":"var fs = require('fs');\nvar _ = require('underscore');\nvar Module = require('module');\nvar path = require('path');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// From: module.js\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// DDOPSON-2012-04-28 - stealing this method from module.js ... seems pretty corner-case\nfunction stripBOM(content) {\n  // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n  // because the buffer-to-string conversion in `fs.readFileSync()`\n  // translates it to FEFF, the UTF-16 BOM.\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// From: underscore.js\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// When customizing `templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\nvar noMatch = /.^/;\n\n// Certain characters need to be escaped so that they can be put into a\n// string literal.\nvar escapes = {\n  '\\\\': '\\\\',\n  \"'\": \"'\",\n  'r': '\\r',\n  'N': '\\n',\n  't': '\\t',\n  'u2028': '\\u2028',\n  'u2029': '\\u2029'\n};\n\nfor (var p in escapes) { escapes[escapes[p]] = p; }\nvar escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\nvar unescaper = /\\\\(\\\\|'|r|N|t|u2028|u2029)/g;\n\n// Within an interpolation, evaluation, or escaping, remove HTML escaping\n// that had been previously added.\nvar unescape = function(code) {\n  return code.replace(unescaper, function(match, escape) {\n    return escapes[escape];\n  });\n};\n\n// JavaScript micro-templating, similar to John Resig's implementation.\n// Underscore templating handles arbitrary delimiters, preserves whitespace,\n// and correctly escapes quotes within interpolated code.\n\n// DDOPSON-2012-04-29 - The method below is written such that the line numbers are in perfect 1:1 correlation between the .template file and the generated JS code.  This means that stacks will have correct line numbers\nfunction parseTemplate(text) {\n  var settings = _.templateSettings;\n\n  // Compile the template source, taking care to escape characters that\n  // cannot be included in a string literal and then unescape them in code\n  // blocks.\n  \n  var source = \"__p+='\" + text\n    .replace(escaper, function(match) {\n      return '\\\\' + escapes[match];\n    })\n    .replace(settings.escape || noMatch, function(match, code) {\n      return \"'+_.escape(\" + unescape(code) + \")+'\";\n    })\n    .replace(settings.interpolate || noMatch, function(match, code) {\n      return \"'+(\" + unescape(code) + \")+'\";\n    })\n    .replace(settings.evaluate || noMatch, function(match, code) {\n      return \"';\" + unescape(code) + \";__p+='\";\n    }) + \"';\";\n\n  // If a variable is not specified, place data values in local scope.\n  if (!settings.variable) {\n    source = 'with(obj||{}){' + source + '}';\n  }\n\n  source = 'function(' + (settings.variable || 'obj') + '){' +\n    \"var __p='', print=function(){__p+=Array.prototype.join.call(arguments, '')};\" +\n    source + \" return __p; }\";\n  source = source.replace(/\\\\N/g, \"\\\\n'+\\n'\");\n  return source;\n}\n\n\n// when loaded as require('foo.template'), text == undefined\n// This allows using require() to import a template as a fn\nrequire.extensions['.template'] = function requireDotTemplate(module, filename, text) {\n  text = stripBOM(text ? text : fs.readFileSync(filename, 'utf8'));\n  var source = \"module.exports = \" + parseTemplate(text);\n  module._compile(source, filename);\n  module.exports.source = source;\n};\n\n\n// This is similar to what happens when require() loads a module, but allows us to pass in the text instead of searching the file-system\nexports.compile = function (filename, text) {\n  filename = path.resolve(filename);\n  var m = new Module(filename, module);\n  m.filename = filename;\n  m.paths = Module._nodeModulePaths(path.dirname(filename));\n  require.extensions['.template'](m, filename, text);\n  m.loaded = true;\n  return m.exports;\n};\n"}